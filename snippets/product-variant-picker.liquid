{% comment %}
  {%- unless product.has_only_default_variant -%}
    {%- for option in product.options_with_values -%}
      <h1 class="font-sans font-bold">{{ option.name }}</h1>
      {%- assign name = option.name | downcase -%}
      {%- assign varient = product.variants | json -%}
      {% assign polina_products = product.variants | where: 'id', 45741972750556 | json %}
      <pre>{{ polina_products }}</pre>
      <div
        x-data="
          {
              items: {{ polina_products }},
              foundItem: null,
              updateSelectedVariant() {
                  this.foundItem = this.items.find(item => item.id === 45741972750556 );
                  console.log(this.items, 'iki');
              }
          }
        "
        class="text-center w-full flex flex-wrap justify-start"

        x-init="$nextTick(updateSelectedVariant())"
      >
        {%- for value in option.values -%}
          <label class="cursor-pointer m-2">
            <input
              type="radio"
              name="option-{{ option.position }}"
              class="hidden"
              :value="'{{ value }}'"
              :checked="selectedOptions[{{ option.position }}] === '{{ value }}'"
              @change="selectOption({{ option.position }}, '{{ value }}')"
            >
            <span
              class="radio-btn relative inline-block items-center rounded-full border-2 shadow-md w-fit transition-all ease-in-out duration-500 {% if name == 'color' %} h-full py-6 px-8{% else %} px-[6px] py-[3px] min-w-14{% endif %}"
              style="{% if name == 'color' %} background-color: {{ value }} {% endif %} ; borderColor: selectedOptions['{{ option.position }}'] === '{{ value  }}' ? {{ schema_setting }} : transparent"
            >
              <i
                style="background-color:{{ schema_setting }}"
                class="checkmark absolute text-white text-lg top-[-15px] left-1/2 transform -translate-x-1/2 scale-150 rounded-full  transition-all duration-500 pointer-events-none px-2 py-0.5 "
                :class="{ 'opacity-100 scale-100': selectedOptions['{{ option.position}}'] === '{{ value  }}', 'opacity-0 scale-150': selectedOptions['{{ option.position }}'] !== '{{ value }}'}"
                >✔</i
              >
              {% if name == 'size' %}
                <div class="flex items-center justify-center">
                  {{ value }}
                </div>
              {% endif %}
            </span>
          </label>
        {%- endfor -%}
      </div>
    {%- endfor -%}
  {%- endunless -%}
{% endcomment %}

{% comment %}
  <script>
    function variantPicker(Varient_json) {

      return {
        variants: {{ product.variants | json }},
        selectedOptions: {},
        selectedVariantId: null,

        updateUrl(variantsList) {
          const urlParams = new URLSearchParams(window.location.search);
          const variantIdFromUrl = urlParams.get('variant');

          if (variantIdFromUrl) {
            const matchedVariant = this.variants.find(
              (variant) => variant.id.toString() === variantIdFromUrl
            );

            console.log(matchedVariant,"oopopop")
            if (matchedVariant) {
              this.setVariantOptions(matchedVariant);
            }
          } else {
            const defaultVariant = this.variants.find((variant) => variant.available);
            if (defaultVariant) {
              this.setVariantOptions(defaultVariant);
            }
          }
        },

        {% comment %} init() {
          const urlParams = new URLSearchParams(window.location.search);
          const variantIdFromUrl = urlParams.get('variant');

          if (variantIdFromUrl) {
            const matchedVariant = this.variants.find(
              (variant) => variant.id.toString() === variantIdFromUrl
            );
            if (matchedVariant) {
              this.setVariantOptions(matchedVariant);
            }
          } else {
            const defaultVariant = this.variants.find((variant) => variant.available);
            if (defaultVariant) {
              this.setVariantOptions(defaultVariant);
            }
          }
        }, {% endcomment %}

        setVariantOptions(variant) {
          variant.options.forEach((value, index) => {
            this.selectedOptions[index + 1] = value;
          });
          this.updateSelectedVariant();
        },

        selectOption(optionPosition, value) {
          this.selectedOptions[optionPosition] = value;
          this.updateSelectedVariant();
          this.updateUrl()
        },

        updateSelectedVariant() {
          const matchedVariant = this.variants.find((variant) =>
            variant.options.every((option, index) => option === this.selectedOptions[index + 1])
          );
          if (matchedVariant && matchedVariant.available) {
            this.selectedVariantId = matchedVariant.id;
            const newUrl = new URL(window.location);
            newUrl.searchParams.set('variant', matchedVariant.id);
            window.history.replaceState(null, '', newUrl);
            document.querySelector('#varientIdHandler').value = matchedVariant.id
          } else {
            this.selectedVariantId = null;
          }
        },

      };
    }
  </script>
{% endcomment %}

{%- unless product.has_only_default_variant -%}
  {%- for option in product.options_with_values -%}
    <h1 class="font-sans font-bold">{{ option.name }}</h1>
    {%- assign name = option.name | downcase -%}

    <div
      class="text-center w-full flex flex-wrap justify-start"
      x-data="variantPicker()"
      x-init="$nextTick(updateUrl())"
    >
      {%- for value in option.values -%}
        <label class="cursor-pointer m-2">
          <input
            type="radio"
            name="option-{{ option.position }}"
            class="hidden"
            :value="'{{ value }}'"
            :checked="selectedOptions[{{ option.position }}] === '{{ value }}'"
            @change="selectOption({{ option.position }}, '{{ value }}')"
          >
          <span
            class="radio-btn relative inline-block items-center rounded-full border-2 shadow-md w-fit transition-all ease-in-out duration-500 {% if name == 'color' %} h-full py-6 px-8{% else %} px-[6px] py-[3px] min-w-14{% endif %}"
            style="{% if name == 'color' %} background-color: {{ value }} {% endif %} ; borderColor: selectedOptions['{{ option.position }}'] === '{{ value  }}' ? {{ schema_setting }} : transparent"
          >
            <i
              style="background-color:{{ schema_setting }}"
              class="checkmark absolute text-white text-lg top-[-15px] left-1/2 transform -translate-x-1/2 scale-150 rounded-full  transition-all duration-500 pointer-events-none px-2 py-0.5 "
              :class="{ 'opacity-100 scale-100': selectedOptions['{{ option.position}}'] === '{{ value  }}', 'opacity-0 scale-150': selectedOptions['{{ option.position }}'] !== '{{ value }}'}"
              >✔</i
            >
            {% if name == 'size' %}
              <div class="flex items-center justify-center">
                {{ value }}
              </div>
            {% endif %}
          </span>
        </label>
      {%- endfor -%}
    </div>
  {%- endfor -%}
{%- endunless -%}

<script>
  function variantPicker(Varient_json) {

    return {
      variants: {{ product.variants | json }},
      selectedOptions: {},
      selectedVariantId: null,

      updateUrl(variantsList) {
        const urlParams = new URLSearchParams(window.location.search);
        const variantIdFromUrl = urlParams.get('variant');

        if (variantIdFromUrl) {
          const matchedVariant = this.variants.find(
            (variant) => variant.id.toString() === variantIdFromUrl
          );

          console.log(matchedVariant,"oopopop")
          if (matchedVariant) {
            this.setVariantOptions(matchedVariant);
          }
        } else {
          const defaultVariant = this.variants.find((variant) => variant.available);
          if (defaultVariant) {
            this.setVariantOptions(defaultVariant);
          }
        }
      },

      {% comment %} init() {
        const urlParams = new URLSearchParams(window.location.search);
        const variantIdFromUrl = urlParams.get('variant');

        if (variantIdFromUrl) {
          const matchedVariant = this.variants.find(
            (variant) => variant.id.toString() === variantIdFromUrl
          );
          if (matchedVariant) {
            this.setVariantOptions(matchedVariant);
          }
        } else {
          const defaultVariant = this.variants.find((variant) => variant.available);
          if (defaultVariant) {
            this.setVariantOptions(defaultVariant);
          }
        }
      }, {% endcomment %}

      setVariantOptions(variant) {
        variant.options.forEach((value, index) => {
          this.selectedOptions[index + 1] = value;
        });
        this.updateSelectedVariant();
      },

      selectOption(optionPosition, value) {
        this.selectedOptions[optionPosition] = value;
        this.updateSelectedVariant();
        this.updateUrl()
      },

      updateSelectedVariant() {
        const matchedVariant = this.variants.find((variant) =>
          variant.options.every((option, index) => option === this.selectedOptions[index + 1])
        );



        if (matchedVariant && matchedVariant.available) {
          this.selectedVariantId = matchedVariant.id;
          const newUrl = new URL(window.location);
          newUrl.searchParams.set('variant', matchedVariant.id);
          window.history.replaceState(null, '', newUrl);
          document.querySelector('#varientIdHandler').value = matchedVariant.id
        } else {
          this.selectedVariantId = null;
        }
      },

    };
  }
</script>
