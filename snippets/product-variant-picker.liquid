{%- unless product.has_only_default_variant -%}
  {%- for option in product.options_with_values -%}
    <h1 class="font-sans font-bold">{{ option.name }}</h1>
    {%- assign name = option.name | downcase -%}

    <div
      class="text-center w-full flex flex-wrap justify-start"
      x-data="
        {
        variants: {{ product.variants | json | escape }},
        selectedOptions: {},
        selectedVariantId: null,

        getAvailable(optionPosition, value) {
        const testOptions = { ...this.selectedOptions, [optionPosition]: value };
        const matchedVariant = this.variants.find((variant) =>
          variant.options.every((option, index) => option === testOptions[index + 1])
        );
        return matchedVariant ? matchedVariant.available : false;
        },

        updateUrl() {
          const urlParams = new URLSearchParams(window.location.search);
          const variantIdFromUrl = urlParams.get('variant');

          if (variantIdFromUrl) {
            const matchedVariant = this.variants.find((variant) => variant.id.toString() === variantIdFromUrl);

            if (matchedVariant.available) {
              this.setVariantOptions(matchedVariant);
            }
          } else {
            const defaultVariant = this.variants.find((variant) => variant.available);
            if (defaultVariant.available) {
              this.setVariantOptions(defaultVariant);
            }
          }
        },

        setVariantOptions(variant) {
          variant.options.forEach((value, index) => {
            this.selectedOptions[index + 1] = value;
          });
          this.updateSelectedVariant();
        },

        selectOption(optionPosition, value) {
          this.selectedOptions[optionPosition] = value;
          console.log(this.selectedOptions,'jkjjj')
          this.updateSelectedVariant();
          this.updateUrl();
        },

        updateSelectedVariant() {
          console.log(this.selectedOptions,'mjjuuu')
          const matchedVariant = this.variants.find((variant) =>
            variant.options.every((option,index) => option === this.selectedOptions[index + 1])
          );

          if (matchedVariant && matchedVariant.available) {
            this.selectedVariantId = matchedVariant.id;
            const newUrl = new URL(window.location);
            newUrl.searchParams.set('variant', matchedVariant.id);
            window.history.replaceState(null, '', newUrl);
            document.querySelector('#varientIdHandler').value = matchedVariant.id;
          } else {
            const newUrl = new URL(window.location);
            newUrl.searchParams.delete('variant');
            window.history.replaceState(null,'', newUrl);
            this.selectedVariantId = null;
          }
        },
        }
      "

      x-init="$nextTick(updateUrl())"
    >
      {%- for value in option.values -%}
        <label class="cursor-pointer m-2">
          <input
            type="radio"
            name="option-{{ option.position }}"
            class="hidden"
            :disabled="!getAvailable({{ option.position }}, '{{ value }}')"
            :value="'{{ value }}'"
            :checked="selectedOptions[{{ option.position }}] === '{{ value }}'"
            @change="selectOption({{ option.position }}, '{{ value }}')"
          >
          <span
            class="radio-btn relative inline-block items-center rounded-full border-2 shadow-md w-fit transition-all ease-in-out duration-500 {% if name == 'color' %} h-full py-6 px-8{% else %} px-[6px] py-[3px] min-w-14{% endif %}"
            :class="{'cursor-not-allowed opacity-50':!getAvailable({{ option.position }}, '{{ value }}')}"
            style="{% if name == 'color' %} background-color: {{ value }} {% endif %} ; borderColor: selectedOptions['{{ option.position }}'] === '{{ value  }}' ? {{ schema_setting }} : transparent"
          >
            <span
              class="absolute top-1/2 left-0 w-full h-[2px] bg-black transform -translate-y-1/2 rotate-45 origin-center"
              :class="{'hidden':getAvailable({{ option.position }}, '{{ value }}')}"
            ></span>
            <i
              style="background-color:{{ schema_setting }}"
              class="checkmark absolute text-white text-lg top-[-15px] left-1/2 transform -translate-x-1/2 scale-150 rounded-full  transition-all duration-500 pointer-events-none px-2 py-0.5 "
              :class="{ 'opacity-100 scale-100': selectedOptions['{{ option.position}}'] === '{{ value  }}', 'opacity-0 scale-150': selectedOptions['{{ option.position }}'] !== '{{ value }}'}"
              >âœ”</i
            >
            {% if name == 'size' %}
              <div class="flex items-center justify-center">
                {{ value }}
              </div>
            {% endif %}
          </span>
        </label>
      {%- endfor -%}
    </div>
  {%- endfor -%}
{%- endunless -%}
