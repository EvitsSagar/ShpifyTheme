<div x-data="variantPicker()" class="space-y-6">
  <form method="post" action="/cart/add" class="space-y-4">
    <input type="hidden" name="id" x-model="selectedVariantId">

    <!-- Variant Options -->
    {% for option in product.options_with_values %}
      <div class="variant-picker space-y-3">
        <h3 class="text-sm font-medium text-gray-700">{{ option.name }}</h3>
        <div class="flex flex-wrap gap-2">
          {% for value in option.values %}
            <button
              type="button"
              class="variant-button px-4 py-2 border rounded-md text-sm text-gray-700 hover:bg-gray-100 focus:ring focus:ring-indigo-500"
              :class="selectedOptions[{{ option.position }}] === '{{ value }}' ? 'bg-indigo-600 text-white' : ''"
              @click="selectOption({{ option.position }}, '{{ value }}')"
            >
              {{ value }}
            </button>
          {% endfor %}
        </div>
      </div>
    {% endfor %}

    <div class="flex gap-4">
      <button
        type="submit"
        class="w-full py-2 px-4 bg-indigo-600 text-white rounded-md shadow hover:bg-indigo-700 disabled:bg-gray-300 disabled:cursor-not-allowed"
        :disabled="!selectedVariantId"
      >
        Add to Cart
      </button>

      <!-- Buy Now Button -->
      <button
        type="button"
        class="w-full py-2 px-4 bg-green-600 text-white rounded-md shadow hover:bg-green-700 disabled:bg-gray-300 disabled:cursor-not-allowed"
        :disabled="!selectedVariantId"
        @click="buyNow"
      >
        Buy Now
      </button>
    </div>
  </form>
</div>

<script>
    function variantPicker() {
        return {
          variants: {{ product.variants | json }}, // All product variants
          selectedOptions: {}, // Selected options for each variant
          selectedVariantId: null, // Selected variant ID
      
          init() {
            // Preselect variant based on URL or default to the first available variant
            const urlParams = new URLSearchParams(window.location.search);
            const variantIdFromUrl = urlParams.get("variant");
      
            if (variantIdFromUrl) {
              const matchedVariant = this.variants.find(
                (variant) => variant.id.toString() === variantIdFromUrl
              );
              if (matchedVariant) {
                this.setVariantOptions(matchedVariant);
              }
            } else {
              const defaultVariant = this.variants.find((variant) => variant.available);
              if (defaultVariant) {
                this.setVariantOptions(defaultVariant);
              }
            }
          },
      
          setVariantOptions(variant) {
            variant.options.forEach((value, index) => {
              this.selectedOptions[index + 1] = value;
            });
            this.updateSelectedVariant();
          },
      
          selectOption(optionPosition, value) {
            this.selectedOptions[optionPosition] = value;
            this.updateSelectedVariant();
          },
      
          updateSelectedVariant() {
            const matchedVariant = this.variants.find((variant) =>
              variant.options.every((option, index) => option === this.selectedOptions[index + 1])
            );
      
            if (matchedVariant && matchedVariant.available) {
              this.selectedVariantId = matchedVariant.id;
      
              // Update the URL
              const newUrl = new URL(window.location);
              newUrl.searchParams.set("variant", matchedVariant.id);
              window.history.replaceState(null, "", newUrl);
            } else {
              this.selectedVariantId = null;
            }
          },
      
          buyNow() {
            if (this.selectedVariantId) {
              // Redirect to checkout with the selected variant
              window.location.href = `/checkout?variants[]=${this.selectedVariantId}&quantity=1`;
            }
          },
        };
      }
</script>

{% comment %}
  <script>
    function variantPicker() {
        return {
          variants: {{ product.variants | json }}, // All product variants
          selectedOptions: {}, // Selected options for each variant
          selectedVariantId: null, // Selected variant ID

          init() {
            // Preselect variant based on URL
            const urlParams = new URLSearchParams(window.location.search);
            const variantIdFromUrl = urlParams.get("variant");

            if (variantIdFromUrl) {
              const matchedVariant = this.variants.find(
                (variant) => variant.id.toString() === variantIdFromUrl
              );
              if (matchedVariant) {
                matchedVariant.options.forEach((value, index) => {
                  this.selectedOptions[index + 1] = value;
                });
                this.updateSelectedVariant();
              }
            }
          },

          selectOption(optionPosition, value) {
            // Update selected option
            this.selectedOptions[optionPosition] = value;
            this.updateSelectedVariant();
          },

          updateSelectedVariant() {
            // Match the selected variant based on options
            const matchedVariant = this.variants.find((variant) =>
              variant.options.every((option, index) => option === this.selectedOptions[index + 1])
            );

            if (matchedVariant && matchedVariant.available) {
              this.selectedVariantId = matchedVariant.id;

              // Update the URL
              const newUrl = new URL(window.location);
              newUrl.searchParams.set("variant", matchedVariant.id);
              window.history.replaceState(null, "", newUrl);
            } else {
              this.selectedVariantId = null;
            }
          },
        };
      }
  </script>
{% endcomment %}
