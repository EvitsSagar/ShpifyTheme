<div x-data="variantPicker()" class="space-y-6">
  <form method="post" action="/cart/add" class="space-y-4">
    <input type="hidden" name="id" x-model="selectedVariantId">

    <!-- Variant Options -->
    {% for option in product.options_with_values %}
      <div class="variant-picker space-y-3">
        <h3 class="text-sm font-medium text-gray-700">{{ option.name }}</h3>
        <div class="flex flex-wrap gap-2">
          {% for value in option.values %}
            <label class="variant-label flex items-center gap-2">
              <input
                type="radio"
                name="option-{{ option.position }}"
                class="hidden"
                :disabled="!getAvailable({{ option.position }}, '{{ value }}')"
                :value="'{{ value }}'"
                :checked="selectedOptions[{{ option.position }}] === '{{ value }}'"
                @change="selectOption({{ option.position }}, '{{ value }}')"
              >
              <span
                class="variant-button inline-block px-4 py-2 border rounded-md text-sm text-gray-700 hover:bg-gray-100 focus:ring focus:ring-indigo-500"
                :class="selectedOptions[{{ option.position }}] === '{{ value }}' ? 'bg-indigo-600 text-white' : ''"
              >
                {{ value }}
              </span>
            </label>
          {% endfor %}
        </div>
      </div>
    {% endfor %}

    <div class="flex gap-4">
      <button
        type="submit"
        class="w-full py-2 px-4 bg-indigo-600 text-white rounded-md shadow hover:bg-indigo-700 disabled:bg-gray-300 disabled:cursor-not-allowed"
        :disabled="!selectedVariantId"
      >
        Add to Cart
      </button>

      <!-- Buy Now Button -->
      <button
        type="button"
        class="w-full py-2 px-4 bg-green-600 text-white rounded-md shadow hover:bg-green-700 disabled:bg-gray-300 disabled:cursor-not-allowed"
        :disabled="!selectedVariantId"
        @click="buyNow"
      >
        Buy Now
      </button>
    </div>
  </form>
</div>

<script>
  function variantPicker() {
    return {
      variants: {{ product.variants | json }}, // All product variants
      selectedOptions: {}, // Selected options for each variant
      selectedVariantId: null, // Selected variant ID


      init() {
        const urlParams = new URLSearchParams(window.location.search);
        const variantIdFromUrl = urlParams.get("variant");

        if (variantIdFromUrl) {
          const matchedVariant = this.variants.find(
            (variant) => variant.id.toString() === variantIdFromUrl
          );
          if (matchedVariant) {
            this.setVariantOptions(matchedVariant);
          }
        } else {
          const defaultVariant = this.variants.find((variant) => variant.available);
          if (defaultVariant) {
            this.setVariantOptions(defaultVariant);
          }
        }
      },

      {% comment %} getAvailable(optionPosition, value){
        let Values={}
        Values[optionPosition]=value
        const matchedVariant = this.variants.find((variant) =>
          variant.options.every((option, index) => option === Values[index + 1])
        ); 
        console.log(this.selectedOptions,'mmhhhh')
        console.log(matchedVariant,'pppoooo')
        return false
      },   {% endcomment %}

      getAvailable(optionPosition, value) {
        const testOptions = { ...this.selectedOptions, [optionPosition]: value };
        const matchedVariant = this.variants.find((variant) =>
          variant.options.every((option, index) => option === testOptions[index + 1])
        );
        return matchedVariant ? matchedVariant.available : false;
      },

      setVariantOptions(variant) {
        variant.options.forEach((value, index) => {
          this.selectedOptions[index + 1] = value;
        });
        this.updateSelectedVariant();  
      },

      selectOption(optionPosition, value) {
        this.selectedOptions[optionPosition] = value;
        this.updateSelectedVariant();
      },

      updateSelectedVariant() {
        const matchedVariant = this.variants.find((variant) =>
          variant.options.every((option, index) => option === this.selectedOptions[index + 1])
        );

        if (matchedVariant && matchedVariant.available) {
          this.selectedVariantId = matchedVariant.id;
          const newUrl = new URL(window.location);
          newUrl.searchParams.set("variant", matchedVariant.id);
          window.history.replaceState(null, "", newUrl);
        } else {
          console.log(matchedVariant.id)
          this.selectedVariantId = null;
        }
      },

      buyNow() {
        if (this.selectedVariantId) {
          // Redirect to checkout with the selected variant
          window.location.href = `/checkout?variants[]=${this.selectedVariantId}&quantity=1`;
        }
      },
    };
  }
</script>

<style>
  .variant-label input {
    display: none;
  }

  .variant-label .variant-button {
    cursor: pointer;
    transition: background-color 0.2s, color 0.2s;
  }
</style>
